-- ================================
-- V1__init_schema.sql
-- ================================

-- auction 테이블
create table if not exists public.auction
(
    id         bigint      not null
        primary key,
    item_id    bigint      not null,
    item_bonus jsonb,
    price      bigint      not null CHECK (price >= 100),
    quantity   integer     not null CHECK (quantity >= 1),
    region     varchar(10) not null
        constraint auction_region_check
            check ((region)::text = ANY ((ARRAY ['US'::character varying, 'KR'::character varying])::text[])),
    realm_id   bigint,
    created_at timestamptz(0)
);

CREATE INDEX IF NOT EXISTS idx_auction_region_realm_item
    on auction (region, realm_id, item_id);

-- item 테이블
create table if not exists public.item
(
    id             bigint       not null
        primary key,
    name           jsonb        not null,
    level          integer      not null,
    class_id       bigint       not null,
    subclass_id    bigint       not null,
    inventory_type varchar(20)  not null
        constraint item_inventory_type_check
            check ((inventory_type)::text = ANY
                   ((ARRAY ['NON_EQUIP'::character varying, 'HEAD'::character varying, 'NECK'::character varying, 'SHOULDER'::character varying, 'BODY'::character varying, 'CHEST'::character varying, 'WAIST'::character varying, 'LEGS'::character varying, 'FEET'::character varying, 'WRIST'::character varying, 'HAND'::character varying, 'FINGER'::character varying, 'TRINKET'::character varying, 'WEAPON'::character varying, 'SHIELD'::character varying, 'RANGED'::character varying, 'CLOAK'::character varying, 'TWOHWEAPON'::character varying, 'BAG'::character varying, 'TABARD'::character varying, 'ROBE'::character varying, 'WEAPONMAINHAND'::character varying, 'WEAPONOFFHAND'::character varying, 'HOLDABLE'::character varying, 'AMMO'::character varying, 'THROWN'::character varying, 'RANGEDRIGHT'::character varying, 'QUIVER'::character varying, 'RELIC'::character varying, 'PROFESSION_TOOL'::character varying, 'PROFESSION_GEAR'::character varying, 'EQUIPABLESPELL_OFFENSIVE'::character varying, 'EQUIPABLESPELL_UTILITY'::character varying, 'EQUIPABLESPELL_DEFENSIVE'::character varying, 'EQUIPABLESPELL_WEAPON'::character varying])::text[])),
    quality        smallint
        constraint item_quality_check
            check ((quality >= 1) AND (quality <= 6)),
    icon           varchar(255) not null,
    display_id     bigint,
    crafting_tier  smallint
        constraint item_crafting_tier_check
            check ((crafting_tier >= 1) AND (crafting_tier <= 3)),
    is_stackable   boolean      not null,
    expansion_id   smallint     not null,
    created_at     timestamp(0),
    updated_at     timestamp(0)
);

CREATE INDEX IF NOT EXISTS idx_item_class_subclass
    ON item (class_id, subclass_id);

-- realm 테이블
create table if not exists public.realm
(
    id                 bigint      not null
        primary key,
    region             varchar(10) not null
        constraint realm_region_check
            check ((region)::text = ANY ((ARRAY ['US'::character varying, 'KR'::character varying])::text[])),
    connected_realm_id bigint      not null,
    name               jsonb       not null,
    slug               varchar(50) not null,
    created_at         timestamp(0),
    updated_at         timestamp(0),
    constraint uq_region_slug
        unique (region, slug)
);

---
CREATE TABLE if not exists item_bonus
(
    id         BIGINT PRIMARY KEY,
    suffix     VARCHAR(100),
    level      INT,
    base_level INT,
    created_at timestamp(0),
    updated_at timestamp(0)
);

---
CREATE TABLE if not exists auction_snapshot
(
    id             bigint generated by default as identity
        primary key,
    item_id        bigint         not null,
    time           timestamptz(0) not null,
    realm_id       bigint,
    region         varchar(255)   not null,
    lowest_price   bigint         not null,
    total_quantity integer        not null,
    item_bonus     jsonb
--     CONSTRAINT fk_auction_snapshot_item_id
--         FOREIGN KEY (item_id) REFERENCES item (id)
);

CREATE INDEX IF NOT EXISTS idx_snapshot_latest
    on auction_snapshot (region, realm_id, item_id, time desc);
---
CREATE OR REPLACE VIEW auction_snapshot_with_item_view AS
SELECT ash.id,
       ash.item_id,
       ash.item_bonus,
       ash.lowest_price,
       ash.total_quantity,
       max(ib.level)      as bonus_level,
       max(ib.base_level) as base_level,
       max(ib.suffix)     as suffix,
       ash.region,
       ash.realm_id,
       ash.time
FROM auction_snapshot ash
         LEFT JOIN LATERAL jsonb_array_elements_text(ash.item_bonus) AS bonus(bonus_id) ON true
         LEFT JOIN item_bonus ib ON ib.id = bonus.bonus_id::bigint
GROUP BY ash.id, ash.item_id, ash.item_bonus, ash.time, ash.region, ash.realm_id, ash.lowest_price, ash.total_quantity;

-- Autogenerated: do not edit this file

CREATE TABLE IF NOT EXISTS BATCH_JOB_INSTANCE
(
    JOB_INSTANCE_ID BIGINT       NOT NULL PRIMARY KEY,
    VERSION         BIGINT,
    JOB_NAME        VARCHAR(100) NOT NULL,
    JOB_KEY         VARCHAR(32)  NOT NULL,
    constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION
(
    JOB_EXECUTION_ID BIGINT    NOT NULL PRIMARY KEY,
    VERSION          BIGINT,
    JOB_INSTANCE_ID  BIGINT    NOT NULL,
    CREATE_TIME      TIMESTAMP NOT NULL,
    START_TIME       TIMESTAMP DEFAULT NULL,
    END_TIME         TIMESTAMP DEFAULT NULL,
    STATUS           VARCHAR(10),
    EXIT_CODE        VARCHAR(2500),
    EXIT_MESSAGE     VARCHAR(2500),
    LAST_UPDATED     TIMESTAMP,
    constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
        references BATCH_JOB_INSTANCE (JOB_INSTANCE_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_PARAMS
(
    JOB_EXECUTION_ID BIGINT       NOT NULL,
    PARAMETER_NAME   VARCHAR(100) NOT NULL,
    PARAMETER_TYPE   VARCHAR(100) NOT NULL,
    PARAMETER_VALUE  VARCHAR(2500),
    IDENTIFYING      CHAR(1)      NOT NULL,
    constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
        references BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION
(
    STEP_EXECUTION_ID  BIGINT       NOT NULL PRIMARY KEY,
    VERSION            BIGINT       NOT NULL,
    STEP_NAME          VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID   BIGINT       NOT NULL,
    CREATE_TIME        TIMESTAMP    NOT NULL,
    START_TIME         TIMESTAMP DEFAULT NULL,
    END_TIME           TIMESTAMP DEFAULT NULL,
    STATUS             VARCHAR(10),
    COMMIT_COUNT       BIGINT,
    READ_COUNT         BIGINT,
    FILTER_COUNT       BIGINT,
    WRITE_COUNT        BIGINT,
    READ_SKIP_COUNT    BIGINT,
    WRITE_SKIP_COUNT   BIGINT,
    PROCESS_SKIP_COUNT BIGINT,
    ROLLBACK_COUNT     BIGINT,
    EXIT_CODE          VARCHAR(2500),
    EXIT_MESSAGE       VARCHAR(2500),
    LAST_UPDATED       TIMESTAMP,
    constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
        references BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION_CONTEXT
(
    STEP_EXECUTION_ID  BIGINT        NOT NULL PRIMARY KEY,
    SHORT_CONTEXT      VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
        references BATCH_STEP_EXECUTION (STEP_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_CONTEXT
(
    JOB_EXECUTION_ID   BIGINT        NOT NULL PRIMARY KEY,
    SHORT_CONTEXT      VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
        references BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
);

CREATE SEQUENCE IF NOT EXISTS BATCH_STEP_EXECUTION_SEQ MAXVALUE 9223372036854775807 NO CYCLE;
CREATE SEQUENCE IF NOT EXISTS BATCH_JOB_EXECUTION_SEQ MAXVALUE 9223372036854775807 NO CYCLE;
CREATE SEQUENCE IF NOT EXISTS BATCH_JOB_SEQ MAXVALUE 9223372036854775807 NO CYCLE;
