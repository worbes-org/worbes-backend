name: Deploy API (Dev)

on:
  push:
    branches:
      - dev
    paths:
      - '.github/workflows/*api.yml'
      - 'application/**'
      - 'adapter/persistence/**'
      - 'adapter/web/**'
      - 'bootstrap/worbes-api/**'
      - 'build.gradle'
      - 'settings.gradle'
jobs:
  deploy-api:
    runs-on: ubuntu-latest
    steps:
      # 빌드 & 푸시
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: aprileaf/worbes-api:dev
          file: ./bootstrap/worbes-api/Dockerfile
          cache-from: type=registry,ref=aprileaf/worbes-api:buildcache
          cache-to: type=registry,ref=aprileaf/worbes-api:buildcache,mode=max

  deploy:
    needs: deploy-api
    if: success()
    environment: dev
    runs-on: ubuntu-latest
    env:
      SERVICE: api
      ENVIRONMENT: dev
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env
        run: echo "${{ secrets.ENV }}" > .env.$ENVIRONMENT

      - name: Rename appspec file
        run: cp appspec-$SERVICE-$ENVIRONMENT.yml appspec.yml

      - name: 압축하기
        run: tar -czvf $SERVICE-$GITHUB_SHA.tar.gz appspec.yml scripts .env.$ENVIRONMENT compose.$ENVIRONMENT.yml

      - name: S3 업로드
        run: aws s3 cp --region ap-northeast-2 ./$SERVICE-$GITHUB_SHA.tar.gz s3://worbes-s3/$SERVICE/$ENVIRONMENT/$GITHUB_SHA.tar.gz

      - name: 배포 실행
        run: |
          aws deploy create-deployment \
            --application-name worbes-code-deploy \
            --deployment-group-name ${ENVIRONMENT}-${SERVICE} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=worbes-s3,bundleType=tgz,key=$SERVICE/$ENVIRONMENT/$GITHUB_SHA.tar.gz
