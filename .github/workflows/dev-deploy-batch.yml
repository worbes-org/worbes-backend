name: Deploy Batch (Dev)

on:
  push:
    branches:
      - dev
    paths:
      - '.github/workflows/*batch.yml'
      - 'application/**'
      - 'adapter/persistence/**'
      - 'adapter/batch/**'
      - 'adapter/client-blizzard/**'
      - 'bootstrap/worbes-batch/**'
      - 'build.gradle'
      - 'settings.gradle'
jobs:
  deploy-batch:
    runs-on: ubuntu-latest
    steps:
      # 빌드 & 푸시
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: aprileaf/worbes-batch:dev
          file: ./bootstrap/worbes-batch/Dockerfile
          cache-from: type=registry,ref=aprileaf/worbes-batch:buildcache
          cache-to: type=registry,ref=aprileaf/worbes-batch:buildcache,mode=max

  deploy:
    needs: deploy-batch
    if: success()
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout compose.dev.yml
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            compose.dev.yml
          sparse-checkout-cone-mode: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2
        run: |
          COMPOSE_B64=$(base64 -w 0 compose.dev.yml)
          ENV_B64=$(echo "${{ secrets.ENV }}" | base64 -w 0)
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.BATCH_EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy worbes-batch" \
            --parameters commands="[
              \"mkdir -p /home/ubuntu/worbes\",
              \"echo $COMPOSE_B64 | base64 -d > /home/ubuntu/worbes/compose.dev.yml\",
              \"echo $ENV_B64 | base64 -d > /home/ubuntu/worbes/.env.dev\",
              \"cd /home/ubuntu/worbes\",
              \"docker compose -f compose.dev.yml pull worbes-batch\",
              \"docker compose -f compose.dev.yml up -d worbes-batch\",
              \"docker image prune -af\",
            ]" \
            --timeout-seconds 600 \
            --output text \
            --query "Command.CommandId")
          
          echo "Deployment started. Command ID: $COMMAND_ID"
          
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.BATCH_EC2_INSTANCE_ID }}"
          
          RESULT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.BATCH_EC2_INSTANCE_ID }}")
          
          STATUS=$(echo $RESULT | jq -r '.Status')
          OUTPUT=$(echo $RESULT | jq -r '.StandardOutputContent')
          ERROR=$(echo $RESULT | jq -r '.StandardErrorContent')
          
          echo "Status: $STATUS"
          echo "Output: $OUTPUT"
          
          if [ "$STATUS" != "Success" ]; then
            echo "Error: $ERROR"
            exit 1
          fi
          
          echo "✅ Deployment completed successfully!"
